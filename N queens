class Solution {
    boolean isSafe(int row, int col, char[][] board, int n)
    {
        int duprow=row;
        int dupcol=col;
        while(row>=0&&col>=0){
            if(board[row][col]=='Q') return false;
            row--;
            col--;
        }
        row=duprow;
        col=dupcol;
        while(col>=0){
            if(board[row][col]=='Q') return false;
            col--;
        }
        row=duprow;
        col=dupcol;
        while(col>=0&&row<n){
            if(board[row][col]=='Q') return false;
            row++;
            col--;
        }
        return true;
    }
    private void solve(List<List<String>> ans, char[][] board, int col, int n)
    {
        if(col==n)
        {
            ans.add(constructlist(board));
            return;
        }
        for(int row=0;row<n;row++)
        {
            if(isSafe(row,col,board,n))
            {
                board[row][col]='Q';
                solve(ans,board,col+1,n);
                board[row][col]='.';
            }
        }
    }
    
    private List<String> constructlist(char board[][])
    {
        List<String> arr=new ArrayList<>();
        for(int i=0;i<board.length;i++)
        {
            String s=new String(board[i]);
            arr.add(s);
        }
        return arr;
    }
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> ans=new ArrayList<>();
        char board[][]=new char[n][n];
        for(char[] ch:board)
        {
            Arrays.fill(ch,'.');
        }
        solve(ans,board,0,n);
        return ans;
    }
}
